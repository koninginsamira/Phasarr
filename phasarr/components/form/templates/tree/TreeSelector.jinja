{#def
    field,
    tree: dict
#}

<script>
    document.onreadystatechange = function () {
        if (document.readyState == "complete") {
            const value = document.getElementById("{{ field.id }}").value;
            const valueIsPrefilled = value;

            if (valueIsPrefilled) {
                navigateTo(value);
            }
        }
    }
</script>

<div class="flex flex-col gap-1">
    <div class="relative">
        <div class="
            placeholder-transparent
            flex flex-col
            w-full
            bg-transparent
            rounded-lg outline outline-1 outline-offset-[-1px]
            {% if field.errors %}
                text-error outline-error focus:outline-error
            {% else %}
                text-on-surface outline-on-surface focus:outline-primary
            {% endif %}
        ">
            <p id="{{ field.id }}_value" class="
                px-6 pt-4 pb-2
                bg-surface
            ">/</p>

            <div id="file_manager" class="h-64 px-4 pb-4 overflow-y-auto">
                <tree.view.TreeView tree={{ tree }}
                    on_branch_open="selectFolder" on_leaf_click="selectFolder" on_navigate="selectFolder" />
            </div>
            
            <script>
                function selectFolder(id) {
                    const fileManager = document.getElementById("file_manager");

                    fileManager.querySelectorAll('[id$="_name"]').forEach((el) => {
                        el.classList.remove("underline");
                    });
                    document.getElementById(id + "_name").classList.add("underline");

                    document.getElementById("{{ field.id }}").value = id;
                    document.getElementById("{{ field.id }}_value").innerHTML = id;
                }
            </script>
        </div>
        {{ field.label(
            class_="
                absolute
                left-3 -top-3
                px-1
                bg-surface
                text-sm select-none " +
                ("text-error "
                    if field.errors else
                "text-on-surface ") +
                ("after:content-[''] after:ml-0.5 after:text-primary"
                    if field | is_required else
                "after:content-['(optional)'] after:ml-1")
        ) }}
    </div>
    <div class="px-4 h-0 overflow-visible">
        {% for error in field.errors %}
            <span class="text-sm text-error">{{ error }}</span>
        {% endfor %}
    </div>
</div>